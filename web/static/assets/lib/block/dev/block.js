// Generated by LiveScript 1.6.0
(function(){
  var block;
  block = {};
  block.manager = function(opt){
    opt == null && (opt = {});
    this.hash = {};
    this.setRegistry(opt.registry);
    return this;
  };
  block.manager.prototype = import$(Object.create(Object.prototype), {
    setRegistry: function(it){
      var ref$;
      this.reg = it || '';
      if (typeof this.reg === 'string') {
        if (this.reg && (ref$ = this.reg)[ref$.length - 1] !== '/') {
          return this.reg += '/';
        }
      }
    },
    set: function(opt){
      var opts, this$ = this;
      opt == null && (opt = {});
      opts = Array.isArray(opt)
        ? opt
        : [opt];
      return Promise.all(opts.map(function(arg$){
        var name, version, block, ref$;
        name = arg$.name, version = arg$.version, block = arg$.block;
        ((ref$ = this$.hash)[name] || (ref$[name] = {}))[version] = block;
        return block.init();
      }));
    },
    getUrl: function(arg$){
      var name, version;
      name = arg$.name, version = arg$.version;
      if (typeof this.reg === 'function') {
        return this.reg({
          name: name,
          version: version
        });
      } else {
        return (this.reg || '') + "/block/" + name + "/" + version;
      }
    },
    get: function(opt){
      var opts, this$ = this;
      opt == null && (opt = {});
      opts = Array.isArray(opt)
        ? opt
        : [opt];
      return Promise.all(opts.map(function(opt){
        var ref$, n, v;
        opt == null && (opt = {});
        ref$ = [opt.name, opt.version || 'latest'], n = ref$[0], v = ref$[1];
        if (!(n && v)) {
          return Promise.reject(new ldError(1015));
        }
        if (((ref$ = this$.hash)[n] || (ref$[n] = {}))[v] != null && !opt.force) {
          return this$.hash[n][v]
            ? Promise.resolve(this$.hash[n][v])
            : Promise.reject(new ldError(404));
        }
        return ld$.fetch(this$.getUrl({
          name: opt.name,
          version: opt.version
        }), {
          method: 'GET'
        }, {
          type: 'text'
        }).then(function(ret){
          var obj, b;
          ret == null && (ret = {});
          this$.set(obj = {
            name: n,
            version: v,
            block: b = new block['class']({
              code: ret,
              name: n,
              version: v
            })
          });
          if (ret.version && ret.version !== v) {
            this$.set((obj.version = ret.version, obj));
          }
          return b.init().then(function(){
            return b;
          });
        });
      })).then(function(it){
        if (Array.isArray(opt)) {
          return it;
        } else {
          return it[0];
        }
      });
    }
  });
  block['class'] = function(opt){
    var code, div;
    opt == null && (opt = {});
    this.opt = opt;
    this.scope = "_" + Math.random().toString(36).substring(2);
    this.inited = false;
    this.name = opt.name;
    this.version = opt.version;
    code = opt.code;
    if (opt.root) {
      code = opt.root.innerHTML;
    }
    if (code) {
      this.code = DOMPurify.sanitize(code || '', {
        ADD_TAGS: ['script', 'style']
      });
      div = document.createElement("div");
      div.innerHTML = this.code;
      if (div.childNodes.length > 1) {
        console.warn("DOM definition of a block should contain only one root.");
      }
      this.datadom = new datadom({
        node: div.childNodes[0]
      });
    } else {
      this.datadom = new datadom({
        node: document.createElement('div')
      });
    }
    return this;
  };
  block['class'].prototype = import$(Object.create(Object.prototype), {
    init: function(){
      var this$ = this;
      if (this.inited) {
        return Promise.resolve();
      }
      return this.datadom.init().then(function(){
        var ret;
        ['script', 'style', 'link'].map(function(n){
          return this$[n] = Array.from(this$.datadom.getNode().querySelectorAll(n)).map(function(it){
            it.parentNode.removeChild(it);
            return it.textContent;
          }).join('\n');
        });
        this$['interface'] = eval(this$.script);
        document.body.appendChild(this$.styleNode = document.createElement("style"));
        this$.styleNode.setAttribute('type', 'text/css');
        this$.styleNode.textContent = ret = csscope({
          scope: "*[scope=" + this$.scope + "]",
          css: this$.style,
          scopeTest: "[scope]"
        });
        this$.factory = function(){
          var args, res$, i$, to$;
          res$ = [];
          for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
            res$.push(arguments[i$]);
          }
          args = res$;
          if (this.init) {
            this.init.apply(this, args);
          }
          return this;
        };
        return this$.factory.prototype = this$['interface'];
      }).then(function(){
        return this$.inited = true;
      });
    },
    getDomNode: function(){
      return this.datadom.getNode();
    },
    getDatadom: function(){
      return this.datadom;
    },
    getDomData: function(){
      return this.datadom.getData();
    },
    create: function(){
      var ret;
      ret = new block.instance({
        block: this
      });
      return ret.init().then(function(){
        return ret;
      });
    }
  });
  block.instance = function(opt){
    opt == null && (opt = {});
    this.block = opt.block;
    this.datadom = new datadom({
      data: JSON.parse(JSON.stringify(this.block.getDomData()))
    });
    this.inited = false;
    return this;
  };
  block.instance.prototype = import$(Object.create(Object.prototype), {
    init: function(){
      var this$ = this;
      if (this.inited) {
        return Promise.resolve();
      } else {
        return this.datadom.init().then(function(){
          return this$.inited = true;
        });
      }
    },
    attach: function(arg$){
      var root, this$ = this;
      root = arg$.root;
      return this.getDomNode().then(function(it){
        it.setAttribute('scope', this$.block.scope);
        document.body.appendChild(it);
        return this$.obj = new this$.block.factory({
          root: it
        });
      });
    },
    update: function(ops){
      return this.datadom.update(ops);
    },
    getDatadom: function(){
      return this.datadom;
    },
    getDomNode: function(){
      return Promise.resolve(this.datadom.getNode());
    },
    getDomData: function(){
      return Promise.resolve(this.datadom.getData());
    }
  });
  if (typeof module != 'undefined' && module !== null) {
    module.exports = block;
  }
  if (typeof window != 'undefined' && window !== null) {
    window.block = block;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
