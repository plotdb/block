// Generated by LiveScript 1.3.1
(function(){
  var block, slice$ = [].slice;
  block = {};
  block.manager = function(opt){
    opt == null && (opt = {});
    this.hash = {};
    this.apiUrl = opt.url || "/";
    return this;
  };
  block.manager.prototype = import$(Object.create(Object.prototype), {
    add: function(arg$){
      var name, version, block, ref$;
      name = arg$.name, version = arg$.version, block = arg$.block;
      return ((ref$ = this.hash)[name] || (ref$[name] = {}))[version] = block;
    },
    getUrl: function(arg$){
      var name, version;
      name = arg$.name, version = arg$.version;
      return this.apiUrl + "block/" + name + "/" + version + "/index.html";
    },
    get: function(opt){
      var ref$, n, v, this$ = this;
      opt == null && (opt = {});
      ref$ = [opt.name, opt.version || 'latest'], n = ref$[0], v = ref$[1];
      if (!(n && v)) {
        return Promise.reject(new ldError(1015));
      }
      if (((ref$ = this.hash)[n] || (ref$[n] = {}))[v] != null && !opt.force) {
        return this.hash[n][v]
          ? Promise.resolve(this.hash[n][v])
          : Promise.reject(new Error(new ldError(404)));
      }
      return ld$.fetch(this.getUrl({
        name: opt.name,
        version: opt.version
      }), {
        method: 'GET'
      }, {
        type: 'text'
      }).then(function(ret){
        var b;
        ret == null && (ret = {});
        this$.add({
          name: n,
          version: v,
          block: b = new block['class']({
            code: ret,
            name: n,
            version: v
          })
        });
        return b;
      });
    }
  });
  block['class'] = function(opt){
    var code, ret, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.name = opt.name;
    this.version = opt.version;
    code = opt.code;
    if (opt.root) {
      code = opt.root.innerHTML;
    }
    if (code) {
      this.code = DOMPurify.sanitize(code || '', {
        ADD_TAGS: ['script', 'style']
      });
      this.dom = document.createElement("div");
      this.dom.classList.add('scope');
      this.dom.innerHTML = this.code;
    } else {
      this.dom = document.createElement("div");
    }
    this.scope = Math.random().toString(36).substring(2);
    ['script', 'style', 'link'].map(function(n){
      return this$[n] = Array.from(this$.dom.querySelectorAll(n)).map(function(it){
        it.parentNode.removeChild(it);
        return it.textContent;
      }).join('\n');
    });
    this.datadom = datadom.serialize(this.dom);
    this['interface'] = eval(this.script);
    document.body.appendChild(this.styleNode = document.createElement("style"));
    this.styleNode.textContent = ret = csscope({
      scope: "[scope=" + this.scope + "]",
      css: this.style
    });
    this.factory = function(){
      var args;
      args = slice$.call(arguments);
      if (this.init) {
        this.init.apply(this, args);
      }
      return this;
    };
    this.factory.prototype = this['interface'];
    return this;
  };
  block['class'].prototype = import$(Object.create(Object.prototype), {
    getDom: function(){
      return datadom.deserialize(this.datadom);
    },
    getDatadom: function(){
      return JSON.parse(JSON.stringify(this.datadom));
    },
    create: function(){
      return new block.instance({
        block: this
      });
    }
  });
  block.instance = function(opt){
    opt == null && (opt = {});
    this.block = opt.block;
    this.datadom = new datadom({
      data: this.block.getDatadom()
    });
    this._init_promise = this.datadom.init();
    return this;
  };
  block.instance.prototype = import$(Object.create(Object.prototype), {
    attach: function(arg$){
      var root, this$ = this;
      root = arg$.root;
      return this.getDom().then(function(it){
        it.setAttribute('scope', this$.block.scope);
        document.body.appendChild(it);
        return this$.obj = new this$.block.factory({
          root: it
        });
      });
    },
    update: function(ops){
      return this.datadom.update(ops);
    },
    getDom: function(){
      var this$ = this;
      return this._init_promise.then(function(){
        var ret;
        return ret = this$.datadom.getNode();
      });
    },
    getData: function(){
      return this.datadom.getData();
    }
  });
  if (typeof module != 'undefined' && module !== null) {
    module.exports = block;
  }
  if (typeof window != 'undefined' && window !== null) {
    window.block = block;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
