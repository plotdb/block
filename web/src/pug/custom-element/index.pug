doctype html
html
  head
    style(type="text/css"): :stylus
      .red
        background: #f00

  body
    template(block="root")
      .blah
        plug(name="main"): h1 hello2
        hr
        p.red this is a block.
    template(block="child")
      div(plug="main")
        h1.red a child
        input(type="submit",value="ok")
        input(name="inside",value="inside")
    form#form(method="post", action="/")
      input.red(type="submit",value="ok")
      input(name="outside",value="outside")

    script(src="/assets/lib/@plotdb/datadom/main/datadom.min.js")
    //- merged ( custom-element + pure js ) implementation
    script: :lsc
      document.body.addEventListener \click, -> console.log it.target
      block = (opt={}) ->
        @name = opt.name
        @extend = opt.extend

        # we will need alternative way to get template
        @template = document.querySelector("template[block=#{@name}]").content

        @template = @template.cloneNode true
        if block.use-ce =>
          if @extend => 
            n = document.createElement("block-#{@extend.name}")
            n.appendChild @template
            @template = n
          @ce = ~>
            root = Reflect.construct(HTMLElement, [], @ce)
            # use shadowDOM
            shadow = root.attachShadow(mode: \open)
            shadow.appendChild @template.cloneNode(true)
            root
          that = @
          @ce.prototype = Object.create(HTMLElement.prototype) <<< {
            # not use shadowDOM. `slot` wont work here.
            #connectedCallback: -> @appendChild that.template.cloneNode(true)
          }
          @ce.prototype.prototype = HTMLElement.prototype
          customElements.define("block-#{@name}", @ce)
        @

      block.prototype = Object.create(Object.prototype) <<< do
        resolve-plug-and-clone-node: (child) ->
          node = @template.cloneNode true
          if child =>
            Array.from(node.querySelectorAll('plug')).map ->
              name = it.getAttribute(\name)
              n = child.querySelector("[plug=#{name}]")
              it.replaceWith n
          return if @extend => @extend.resolve-plug-and-clone-node(node) else node

        create-dom: ->
          if block.use-ce => return @node = document.createElement("block-#{@name}")
          ret = @resolve-plug-and-clone-node!childNodes.0
          ret.parentNode.removeChild ret
          return @node = ret

        attach: ->
          ret = @create-dom!
          #document.body.appendChild ret
          form.appendChild ret
          return ret
      block.use-ce = false
      root = new block name: \root
      #root.attach!
      child = new block name: \child, extend: root
      ret = child.attach!
      dd = new datadom node: ret
      dd.init!then ->
        console.log dd
        ret = document.body.querySelector('block-child')
        console.log ret

    //- custom-element implementation
    //-script: :lsc
      block = (opt={}) ->
        @name = opt.name
        @parent = opt.parent
        @template = document.querySelector("template[block=#{@name}]")
        @ce = ~>
          root = Reflect.construct(HTMLElement, [], @ce)
          shadow = root.attachShadow(mode: \open)
          shadow.appendChild @template.content.cloneNode true
          root
        @ce.prototype = Object.create(HTMLElement.prototype)
        @ce.prototype.prototype = HTMLElement.prototype
        customElements.define("block-#{@name}", @ce)
        @
      block.prototype = Object.create(Object.prototype) <<< do
        attach: ->
          @node = document.createElement("block-#{@name}")
          document.body.appendChild @node
          return @node
      root = new block name: \root
      child = new block name: \child, parent: root
      ret = child.attach!


    //- pure JS implementation
    //-script: :lsc
      block = (opt={}) ->
        @name = opt.name
        @parent = opt.parent
        @template = document.querySelector("template[block=#{@name}]")
        @
      block.prototype = Object.create(Object.prototype) <<< do
        resolve-slot-and-clone-node: (child) ->
          node = @template.content.cloneNode true
          if child =>
            Array.from(node.querySelectorAll('slot')).map ->
              name = it.getAttribute(\name)
              n = child.querySelector("[slot=#{name}]")
              it.replaceWith n
          return if @parent => @parent.resolve-slot-and-clone-node node else node
        attach: ->
          @node = @resolve-slot-and-clone-node!
          console.log @node
          document.body.appendChild @node
      root = new block name: \root
      child = new block name: \child, parent: root
      child.attach!


    //-

      template#t
        slot(name="content") fallback
        hr
        p this is a form block.
      ld-name
        div(slot="content")
          h3 Title
          p some description ....

      script: :lsc
        blah = ->
          ret = Reflect.construct(HTMLElement, [], blah)
          template = document.getElementById \t
          console.log ret
          shadow = ret.attachShadow mode: \open
          shadow.appendChild template.content.cloneNode true
          ret
        blah.prototype = Object.create(HTMLElement.prototype)
        blah.prototype.prototype = HTMLElement.prototype
        customElements.define('ld-name', blah)
        #new blah!
        template = document.getElementById \a
        document.body.appendChild template.content.cloneNode true
